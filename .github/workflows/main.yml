on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.ref }}
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
          cache: 'yarn'
      - uses: actions/github-script@v5
        id: build-info
        with:
          script: |
            const commitLookup = await github.request('GET /repos/PyrrhaDevs/pyrrha.dev/git/commits/{sha}', {
                sha: context.sha
            });

            if(commitLookup.status == 200) {
                const authorLookup = await github.request('GET /search/users?q={email} in:email&per_page=1', {
                    email: commitLookup.data.author.email
                });

                if(authorLookup.status == 200) {
                    if(authorLookup.data.total_count > 0) {
                        const buildInfo = {
                            username: authorLookup.data.items[0].login,
                            date: commitLookup.data.author.date,
                            sha: context.sha,
                            message: commitLookup.data.message
                        }

                        core.setOutput('buildInfo', JSON.stringify(buildInfo))
                    } else {
                        core.error(`[AuthorLookup|IncompleteData(${authorLookup.data.incomplete_data})] Failed to find user with email "${commitLookup.data.author.email}".`)
                    }
                } else {
                    core.error(`[AuthorLookup|Status(${authorLookup.status})] Failed to find user with email "${commitLookup.data.author.email}".`);
                }
            } else {
                core.error(`[CommitLookup|Status(${commitLookup.status})] Failed to find commit with SHA1 "${context.sha}".`)
            }
      - run: yarn install
      - run: yarn build
        env:
          REACT_APP_BUILD_INFO: ${{ steps.build-info.outputs.buildInfo }}
      - id: get-sha
        shell: bash
        run: echo "::set-output name=sha::$(git rev-parse --short HEAD)"
      - uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: build/
          full_commit_message: 'ci: publish ${{ steps.get-sha.outputs.sha }}'
